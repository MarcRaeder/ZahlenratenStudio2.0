{"version":3,"sources":["ExampleCustomForm/ExampleCustomForm.tsx","DialogRenderer/CustomFormsRenderer.tsx","ExampleStartDialog/ExampleStartdialog.tsx","DialogRenderer/StartDialogRenderer.tsx","App.tsx","index.tsx"],"names":["ExampleCustomForm","props","state","className","onClick","this","_handleFormSubmit","bind","finishUserTask","React","Component","CustomFormsRenderer","targetComponent","userTask","suspendState","components","customFormService","updateComponent","_identity","preferredControl","userTaskConfig","customForm","Error","JSON","stringify","component","setState","suspendUserTask","abortUserTask","terminateProcessInstance","result","CustomFormService","onUserTaskReceived","destroy","createElement","ExampleStartDialog","StartDialogRenderer","startDialogService","displayStartDialog","config","identity","id","targetIdentity","targetStartDialogConfiguration","currentLanguage","StartDialogService","onStartDialogDisplayed","language","closeStartDialog","openStartDialog","startDialogId","startDialogConfiguration","startProcess","processModelId","payload","startEventId","withTranslation","App","style","height","displayName","name","container","document","getElementById","createRoot","render"],"mappings":"saAMaA,EAAb,kDAEE,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAEDC,MAAQ,CAAC,EAHQ,CAIvB,CANH,0CAQE,WACE,OACE,sBAAKC,UAAU,aAAf,UACE,uDACA,wBAAQC,QAASC,KAAKC,kBAAkBC,KAAKF,MAA7C,uBAKL,GAjBH,+BAmBE,WACEA,KAAKJ,MAAMO,eAAe,CAAC,EAC5B,KArBH,GAAuCC,IAAMC,WC2BhCC,EAAb,4MAEST,MAAiC,CACtCU,gBAAiB,KACjBC,SAAU,KACVC,aAAc,MALlB,EAQUC,WAAuC,CAC7Cf,kBAAmBA,GATvB,EAYUgB,kBAA8C,KAZxD,EAwBSC,gBAAkB,SACvBJ,EACAK,EACAJ,GAGA,IAAMK,EAAmBN,EAASO,eAAeC,WACjD,IAAKF,EACH,MAAM,IAAIG,MAAJ,+CAAkDC,KAAKC,UAAUX,KAGzE,IAAMY,EAAY,EAAKV,WAAWI,GAClC,IAAKM,EACH,MAAM,IAAIH,MAAJ,0CAA6CC,KAAKC,UAAUX,KAGpE,EAAKa,SAAS,CACZd,gBAAiBa,EACjBZ,SAAUA,EACVC,aAAcA,GAEjB,EA7CH,EAsDSa,gBAAkB,SAACzB,GAA4B,IAAD,EACnD,YAAKc,yBAAL,SAAwBW,gBAAgBzB,EACzC,EAxDH,EA0DS0B,cAAgB,WAAa,IAAD,EACjC,YAAKZ,yBAAL,SAAwBa,0BACzB,EA5DH,EA8DSrB,eAAiB,SAACsB,GAA+D,IAAD,EACrF,YAAKd,yBAAL,SAAwBR,eAAesB,EACxC,EAhEH,uDAcE,WACEzB,KAAKW,kBAAoB,IAAIe,oBAC7B1B,KAAKW,kBAAkBgB,mBAAmB3B,KAAKY,iBAE/CZ,KAAKU,WAAL,2BACKV,KAAKU,YACLV,KAAKJ,MAAMc,WAEjB,GAtBH,kCA+CE,WACOV,KAAKW,mBAGVX,KAAKW,kBAAkBiB,SACxB,GApDH,oBAkEE,WACE,OAAK5B,KAAKH,MAAMU,gBAIUH,IAAMyB,cAAc7B,KAAKH,MAAMU,gBAAiB,CACxEC,SAAUR,KAAKH,MAAMW,SACrBC,aAAcT,KAAKH,MAAMY,aACzBa,gBAAiBtB,KAAKsB,gBACtBC,cAAevB,KAAKuB,cACpBpB,eAAgBH,KAAKG,iBARd,IAYV,KAhFH,GAAyCC,IAAMC,W,QC7BlCyB,EAAb,4JAEE,WACE,OACE,uDAEH,KANH,GAAwC1B,IAAMC,WC8CxC0B,E,kDAIJ,WAAYnC,GAAoD,IAAD,8BAC7D,cAAMA,IAHAoC,mBAAgD,KAEO,EAWvDtB,WAAuC,CAC7CoB,mBAAoBA,GAZyC,EAgCvDG,mBAAqB,SAACC,EAAkCC,GAC9D,IAAMf,EAAY,EAAKV,WAAWwB,EAAOE,IACzC,IAAKhB,EACH,MAAM,IAAIH,MAAJ,0CAA6CC,KAAKC,UAAUe,KAGpE,EAAKb,SAAS,CACZd,gBAAiBa,EACjBiB,eAAgBF,EAChBG,+BAAgCJ,GAEnC,EAxCC,EAAKrC,MAAQ,CACXU,gBAAiB,KACjB8B,eAAgB,KAChBC,+BAAgC,KAChCC,gBAAiB,MAP0C,CAS9D,C,qDAMD,WACEvC,KAAKgC,mBAAqB,IAAIQ,qBAC9BxC,KAAKgC,mBAAmBS,uBAAuBzC,KAAKiC,oBAEpDjC,KAAKU,WAAL,2BACKV,KAAKU,YACLV,KAAKJ,MAAMc,WAEjB,G,kCAED,WACOV,KAAKgC,oBAGVhC,KAAKgC,mBAAmBJ,SACzB,G,oBAeD,WAAqC,IAAD,OAClC,IAAK5B,KAAKH,MAAMU,kBAAoBP,KAAKH,MAAMyC,iCAAmCtC,KAAKH,MAAMwC,eAC3F,OAAO,KAGT,IAAMzC,EAA0B,CAC9B8C,SAAU,KACVC,iBAAkB,kCAAY,EAAKX,0BAAjB,aAAY,EAAyBW,kBAArC,EAClBC,gBAAiB,SAACC,GAAD,uBAAiC,EAAKb,0BAAtC,aAAiC,EAAyBY,gBAAgBC,EAA1E,EACjBV,SAAUnC,KAAKH,MAAMwC,eACrBS,yBAA0B9C,KAAKH,MAAMyC,+BACrCS,aAAc,SAACC,EAAgBC,EAAUC,GAAyB,IAAD,EAC/D,YAAKlB,0BAAL,SAAyBe,aAAaC,EAAgBC,EAASC,EAChE,EACDhB,OAAQlC,KAAKJ,MAAMsC,QAKrB,OAF0B9B,IAAMyB,cAAc7B,KAAKH,MAAMU,gBAAiBX,EAG3E,K,GArE+BQ,IAAMC,WAyEzB8C,gBAAkBpB,G,QCpHZqB,G,kKAGnB,WACE,OACE,sBAAKC,MAAO,CAAEC,OAAQ,QAAtB,UACE,cAAC,EAAD,CAAqBpB,OAAQA,IAC7B,cAAC,EAAD,CAAqBA,OAAQA,MAGlC,K,GAV8B7B,cAAZ+C,EACZG,YAAcH,EAAII,KCF3B,IAAMC,EAAYC,SAASC,eAAe,QAC7BC,qBAAWH,GAEnBI,OAAO,cAAC,EAAD,I","file":"static/js/main.b8391708.chunk.js","sourcesContent":["import React from 'react';\n\nimport { CustomFormProps } from '../DialogRenderer';\n\nimport './ExampleCustomForm.css';\n\nexport class ExampleCustomForm extends React.Component<CustomFormProps> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {};\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className='test-class'>\n        <p>This is a custom-form.</p>\n        <button onClick={this._handleFormSubmit.bind(this)}>\n          Confirm\n        </button>\n      </div>\n    );\n  }\n\n  private _handleFormSubmit(): void {\n    this.props.finishUserTask({});\n  }\n\n}\n","import React from 'react';\n\nimport { DataModels, Identity } from '@atlas-engine/atlas_engine_client';\nimport { CustomFormService, FormState } from '@atlas-engine-contrib/atlas-ui_sdk';\n\nimport { Config } from '../config';\nimport { ExampleCustomForm } from '../ExampleCustomForm';\n\n\nexport type CustomFormProps = {\n  userTask: DataModels.FlowNodeInstances.UserTaskInstance;\n  suspendState: FormState;\n  abortUserTask: () => void;\n  finishUserTask: (result: DataModels.FlowNodeInstances.UserTaskResult) => void;\n  suspendUserTask: (state: FormState) => void;\n  config: Config,\n}\n\nexport type CustomFormRendererProps = {\n  components?: CustomFormsComponentDict;\n  config?: Config;\n}\n\nexport type CustomFormsServiceState = {\n  targetComponent: React.ComponentClass<CustomFormProps> | React.FunctionComponent<CustomFormProps> | null;\n  userTask: DataModels.FlowNodeInstances.UserTaskInstance | null;\n  suspendState: FormState | null;\n}\n\nexport type CustomFormsComponentDict = {\n  [preferredControl: string]: React.ComponentClass<CustomFormProps> | React.FunctionComponent<CustomFormProps>;\n}\n\nexport class CustomFormsRenderer extends React.Component<CustomFormRendererProps, CustomFormsServiceState> {\n\n  public state: CustomFormsServiceState = {\n    targetComponent: null,\n    userTask: null,\n    suspendState: null,\n  };\n\n  private components: CustomFormsComponentDict = {\n    ExampleCustomForm: ExampleCustomForm,\n  };\n\n  private customFormService: CustomFormService | null = null;\n\n  public componentDidMount(): void {\n    this.customFormService = new CustomFormService();\n    this.customFormService.onUserTaskReceived(this.updateComponent);\n\n    this.components = {\n      ...this.components,\n      ...this.props.components,\n    };\n  }\n\n  public updateComponent = (\n    userTask: DataModels.FlowNodeInstances.UserTaskInstance,\n    _identity: Identity,\n    suspendState: FormState | null,\n  ): void => {\n\n    const preferredControl = userTask.userTaskConfig.customForm;\n    if (!preferredControl) {\n      throw new Error(`No preferredControl set in usertask: ${JSON.stringify(userTask)}`);\n    }\n\n    const component = this.components[preferredControl];\n    if (!component) {\n      throw new Error(`No component found for usertask ${JSON.stringify(userTask)}`);\n    }\n\n    this.setState({\n      targetComponent: component,\n      userTask: userTask,\n      suspendState: suspendState,\n    });\n  };\n\n  public componentWillUnmount(): void {\n    if (!this.customFormService) {\n      return;\n    }\n    this.customFormService.destroy();\n  }\n\n  public suspendUserTask = (state: FormState): void => {\n    this.customFormService?.suspendUserTask(state);\n  };\n\n  public abortUserTask = (): void => {\n    this.customFormService?.terminateProcessInstance();\n  };\n\n  public finishUserTask = (result: DataModels.FlowNodeInstances.UserTaskResult): void => {\n    this.customFormService?.finishUserTask(result);\n  };\n\n  public render(): JSX.Element | null {\n    if (!this.state.targetComponent) {\n      return null;\n    }\n\n    const componentInstance = React.createElement(this.state.targetComponent, {\n      userTask: this.state.userTask,\n      suspendState: this.state.suspendState,\n      suspendUserTask: this.suspendUserTask,\n      abortUserTask: this.abortUserTask,\n      finishUserTask: this.finishUserTask,\n    } as CustomFormProps);\n\n    return componentInstance;\n  }\n\n}\n","import React from 'react';\n\nimport { StartDialogProps, StartDialogRendererState } from '../DialogRenderer';\n\nexport class ExampleStartDialog extends React.Component<StartDialogProps, StartDialogRendererState> {\n\n  public render(): JSX.Element {\n    return (\n      <p>This is a start-dialog.</p>\n    );\n  }\n}\n","import React from 'react';\nimport { withTranslation, WithTranslation } from 'react-i18next';\n\nimport { IIdentity } from '@atlas-engine/atlas_engine_client';\nimport { StartDialogDisplayedCallback, StartDialogService } from '@atlas-engine-contrib/atlas-ui_sdk';\n\nimport { Config } from '../config';\nimport { ExampleStartDialog } from '../ExampleStartDialog';\n\n\nexport type DialogComponentDict = {\n  [id: string]: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type StartDialogProps = {\n  language: string,\n  identity: IIdentity;\n  startDialogConfiguration: StartDialogConfiguration;\n  closeStartDialog: () => void;\n  openStartDialog: (startDialogId: string) => void;\n  startProcess: (processModelId: string, payload?: unknown, startEventId?: string) => void;\n  config: Config | undefined;\n};\n\nexport type StartDialogRendererProps = {\n  components?: StartDialogComponentDict;\n  stammdatenDialogs?: DialogComponentDict;\n  config?: Config;\n}\n\nexport type StartDialogComponentDict = {\n  [startDialogId: string]: React.ComponentClass<StartDialogProps> | React.FunctionComponent<StartDialogProps>;\n}\n\nexport type StartDialogRendererState = {\n  targetComponent: React.ComponentClass<StartDialogProps> | React.FunctionComponent<StartDialogProps> | null;\n  targetStartDialogConfiguration: StartDialogConfiguration | null;\n  targetIdentity: IIdentity | null;\n  currentLanguage: string;\n}\n\nexport type StartDialogConfiguration = {\n  id: string;\n  title: string;\n  body: string;\n  url: string;\n  startButtonTitle: string;\n}\n\nclass StartDialogRenderer extends React.Component<StartDialogRendererProps & WithTranslation, StartDialogRendererState> {\n\n  private startDialogService: StartDialogService | null = null;\n\n  constructor(props: StartDialogRendererProps & WithTranslation) {\n    super(props);\n\n    this.state = {\n      targetComponent: null,\n      targetIdentity: null,\n      targetStartDialogConfiguration: null,\n      currentLanguage: 'de',\n    };\n  }\n\n  private components: StartDialogComponentDict = {\n    ExampleStartDialog: ExampleStartDialog,\n  };\n\n  public componentDidMount(): void {\n    this.startDialogService = new StartDialogService();\n    this.startDialogService.onStartDialogDisplayed(this.displayStartDialog as StartDialogDisplayedCallback);\n\n    this.components = {\n      ...this.components,\n      ...this.props.components,\n    };\n  }\n\n  public componentWillUnmount(): void {\n    if (!this.startDialogService) {\n      return;\n    }\n    this.startDialogService.destroy();\n  }\n\n  private displayStartDialog = (config: StartDialogConfiguration, identity: IIdentity): void => {\n    const component = this.components[config.id];\n    if (!component) {\n      throw new Error(`No component found for usertask ${JSON.stringify(config)}`);\n    }\n\n    this.setState({\n      targetComponent: component,\n      targetIdentity: identity,\n      targetStartDialogConfiguration: config,\n    });\n  };\n\n  public render(): JSX.Element | null {\n    if (!this.state.targetComponent || !this.state.targetStartDialogConfiguration || !this.state.targetIdentity) {\n      return null;\n    }\n\n    const props: StartDialogProps = {\n      language: 'de',\n      closeStartDialog: (): void => this.startDialogService?.closeStartDialog(),\n      openStartDialog: (startDialogId: string): void => this.startDialogService?.openStartDialog(startDialogId),\n      identity: this.state.targetIdentity,\n      startDialogConfiguration: this.state.targetStartDialogConfiguration,\n      startProcess: (processModelId, payload?, startEventId?): void => {\n        this.startDialogService?.startProcess(processModelId, payload, startEventId);\n      },\n      config: this.props.config,\n    };\n\n    const componentInstance = React.createElement(this.state.targetComponent, props);\n\n    return componentInstance;\n  }\n\n}\n\nexport default withTranslation()(StartDialogRenderer);\n","import { Component } from 'react';\r\n\r\nimport { CustomFormsRenderer, StartDialogRenderer } from './DialogRenderer';\r\nimport { default as config } from './config/config.json';\r\n\r\nimport './custom.css';\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div style={{ height: '100%' }}>\r\n        <CustomFormsRenderer config={config} />\r\n        <StartDialogRenderer config={config} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport App from './App';\r\n\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container!);\r\n\r\nroot.render(<App />);\r\n"],"sourceRoot":""}